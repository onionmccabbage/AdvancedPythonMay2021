Advanced Python Review 4:
=========================
This exercise is an opportunity to consider architecture as well as build a solution
There is an API end-point here: https://swapi.dev/api  	   (it is a Python API written in Django)
(It includes some documentation here: https://swapi.dev/documentation)

It is used by passing parameters for 'category' and 'id' e.g.
  https://swapi.dev/api/people/1
  https://swapi.dev/api/species/3
Category can be any one of 'people', 'planets', 'species' or 'vehicles' (maybe use a named tuple for these)
The id can be in the range 1-6 (though some id values currently fail, so catch exceptions)
NB Vehicles is problematic, but id=30 works!!!

Either ask the user for a category and an id, or read values in from a data file
In all cases, check they are valid then make a get request and show the returned json
(You can get a list of valid categories from the API end-point)
Append a few data properties to a text file
  E.g. every category includes a 'name' property
  The 'people' category includes 'hair_color' and 'height'
  The 'planets' category includes 'orbital_period' and 'population'
  The 'species' category includes 'designation' and 'homeworld'
  The 'vehicles' caltegory includes 'manufacturer' and 'model'

Optional
--------
Try to make the request happen in it's own thread, returning data via the 'join' method
Architect your application so you have classes for 'People', 'Planets', 'Species' and 'Vehicles'
These classes could all descend from a common base class called 'Swapi'
Also write your 'swapi_service' in a separate module
Populate an instance of the relevant class depending on the returned data
(You could encapsulate validation and error-handling in classes too, maybe with decorators)

Super Optional
--------------
Use a separate thread to make a request for all the categories, then offer these as options for the user
As soon as their 'category/id' request returns, make further (multi-threaded) requests for each film in the returned data set
Use timers and profiles to explore the performance of your solution
See if using RLocks, Semaphores, Events and/or Conditions can improve the performance